{"version":3,"file":"static/js/463.881a4dc9.chunk.js","mappings":"+NAEO,MAAMA,EAAOC,EAAAA,EAAOC,KAAIC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2FAOlBC,EAAQJ,EAAAA,EAAOK,MAAKC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,+EAMpBI,EAAQP,EAAAA,EAAOQ,MAAKC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,wSAapBO,EAASV,EAAAA,EAAOW,OAAMC,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,6P,aCtBnC,MAuEA,EAvEoBU,KAClB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,IAE/BG,GAAWC,EAAAA,EAAAA,MAEXC,EAAeC,IAAiB,IAAhB,OAAEC,GAAQD,EAC9B,MAAM,KAAER,EAAI,MAAEU,GAAUD,EAExB,OAAQT,GACN,IAAK,OACHC,EAAQS,GACR,MACF,IAAK,SACHN,EAAUM,GACV,MACF,QACE,OACJ,EAgBIC,EAAQA,KACZV,EAAQ,IACRG,EAAU,GAAG,EAGf,OACEQ,EAAAA,EAAAA,MAAC3B,EAAI,CAAC4B,SAnBaC,IACnBA,EAAIC,iBAEJ,MAAMC,EAAa,CACjBhB,MAAMiB,EAAAA,EAAAA,GAAWjB,EAAKkB,QACtBf,QAAQgB,EAAAA,EAAAA,GAAahB,EAAOe,SAG9Bb,GAASe,EAAAA,EAAAA,IAAWJ,IAEpBL,GAAO,EASsBU,SAAA,EAC3BT,EAAAA,EAAAA,MAAA,OAAAS,SAAA,EACEC,EAAAA,EAAAA,KAAChC,EAAK,CAAA+B,SAAC,UACPC,EAAAA,EAAAA,KAAC7B,EAAK,CACJ8B,KAAK,OACLvB,KAAK,OACLU,MAAOV,EACPwB,UAAQ,EACRC,SAAUlB,EACVmB,QAAQ,2HACRC,YAAY,oBAGhBf,EAAAA,EAAAA,MAAA,OAAAS,SAAA,EACEC,EAAAA,EAAAA,KAAChC,EAAK,CAAA+B,SAAC,YACPC,EAAAA,EAAAA,KAAC7B,EAAK,CACJ8B,KAAK,MACLvB,KAAK,SACLU,MAAOP,EACPqB,UAAQ,EACRC,SAAUlB,EACVmB,QAAQ,qGACRC,YAAY,2BAIhBL,EAAAA,EAAAA,KAAC1B,EAAM,CAAC2B,KAAK,SAAQF,SAAC,kBACjB,E,sBCvEJ,MACMO,EAAkBC,GAASA,EAAMC,SAASC,UAC1CC,EAAcH,GAASA,EAAMC,SAASG,MACtCC,EAAeL,GAASA,EAAMM,OAE9BC,GAAwBC,EAAAA,EAAAA,IACnC,CAN4BR,GAASA,EAAMC,SAASQ,MAMnCJ,IACjB,CAACJ,EAAUK,IACFL,EAASK,QAAOI,GACrBA,EAAQvC,KAAKwC,cAAcC,SAASN,EAAOK,mB,MCT1C,MAAM/C,EAAQP,EAAAA,EAAOQ,MAAKN,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6TCuBjC,EApBeqD,KACb,MAAMP,GAASQ,EAAAA,EAAAA,IAAYT,GAErB7B,GAAWC,EAAAA,EAAAA,MAMjB,OACEgB,EAAAA,EAAAA,KAAC7B,EAAK,CACJ8B,KAAK,OACLvB,KAAK,SACLU,MAAOyB,EACPV,SATuBjB,IAAiB,IAAhB,OAAEC,GAAQD,EACpCH,GAASuC,EAAAA,EAAAA,GAAUnC,EAAOC,MAAMQ,QAAQ,EAStCS,YAAY,kBACZ,E,cCnBC,MAAMkB,EAAO3D,EAAAA,EAAO4D,GAAE1D,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+FAOhB0D,EAAO7D,EAAAA,EAAO8D,GAAExD,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,8JAUhB4D,EAAO/D,EAAAA,EAAOgE,EAACvD,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,+CAKfO,EAASV,EAAAA,EAAOW,OAAMC,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,sNAStB8D,EAAQjE,EAAAA,EAAOgE,EAACE,IAAAA,GAAA/D,EAAAA,EAAAA,GAAA,oECV7B,EAnBwBmB,IAAkB,IAAjB,QAAE+B,GAAS/B,EAClC,MAAM,GAAE6C,EAAE,KAAErD,EAAI,OAAEG,GAAWoC,EAEvBlC,GAAWC,EAAAA,EAAAA,MAMjB,OACEM,EAAAA,EAAAA,MAACmC,EAAI,CAAA1B,SAAA,EACHT,EAAAA,EAAAA,MAACqC,EAAI,CAACI,GAAIA,EAAGhC,SAAA,CACVrB,EAAK,KAAGG,MAEXmB,EAAAA,EAAAA,KAAC1B,EAAM,CAAC0D,QATYC,KACtBlD,GAASmD,EAAAA,EAAAA,IAAcH,GAAI,EAQQhC,SAAC,aAC7B,E,aCPX,MAuBA,EAvBoBoC,KAClB,MAAMC,GAAkBf,EAAAA,EAAAA,IAAYP,GAC9BL,GAAYY,EAAAA,EAAAA,IAAYf,GACxBK,GAAQU,EAAAA,EAAAA,IAAYX,GAEpB3B,GAAWC,EAAAA,EAAAA,MAMjB,OAJAqD,EAAAA,EAAAA,YAAU,KACRtD,GAASuD,EAAAA,EAAAA,MAAgB,GACxB,CAACvD,KAGFO,EAAAA,EAAAA,MAACiC,EAAI,CAAAxB,SAAA,CACFU,IAAaT,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,IACpB5B,IAASX,EAAAA,EAAAA,KAAC6B,EAAK,CAAA9B,SAAEY,IACjByB,EAAgBI,OAAS,GACxBJ,EAAgBK,KAAIxB,IAClBjB,EAAAA,EAAAA,KAAC0C,EAAe,CAAkBzB,QAASA,GAArBA,EAAQc,QAE7B,E,UC7BJ,MAAMY,EAAU/E,EAAAA,EAAOgF,IAAG9E,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mCAcpB8E,EAAQjF,EAAAA,EAAOkF,GAAE5E,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,yDAKjBgF,EAAgBnF,EAAAA,EAAOoF,GAAE3E,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,yDCFtC,EAdiBkF,KAEbjD,EAAAA,EAAAA,KAAAkD,EAAAA,SAAA,CAAAnD,UACET,EAAAA,EAAAA,MAACqD,EAAO,CAAA5C,SAAA,EACNC,EAAAA,EAAAA,KAAC6C,EAAK,CAAA9C,SAAC,eACPC,EAAAA,EAAAA,KAACvB,EAAW,KACZuB,EAAAA,EAAAA,KAAC+C,EAAa,CAAAhD,SAAC,cACfC,EAAAA,EAAAA,KAACoB,EAAM,KACPpB,EAAAA,EAAAA,KAACmC,EAAW,Q","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/contacts-filter/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  max-width: 400px;\n  padding: 10px;\n  text-align: center;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  margin-bottom: 10px;\n  padding: 5px;\n  max-width: 160px;\n  &:focus {\n    border: 3px solid #7396d8;\n    outline: none;\n  }\n`;\n\nexport const Button = styled.button`\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  padding: 5px;\n  margin: 20px auto;\n  &:hover {\n    background-color: #7396d8;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { formatName, formatNumber } from 'services/helpers';\nimport { addContact } from '../../redux/contacts-filter/operations';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const newContact = {\n      name: formatName(name.trim()),\n      number: formatNumber(number.trim()),\n    };\n\n    dispatch(addContact(newContact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>\n        <Label>Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          required\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          placeholder=\"Entrer name\"\n        />\n      </div>\n      <div>\n        <Label>Number</Label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          required\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          placeholder=\"Enter phone number\"\n        />\n      </div>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  margin: 0 auto 20px;\n  display: block;\n  padding: 5px;\n  max-width: 160px;\n\n  &:focus {\n    border: 3px solid #7396d8;\n    outline: none;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts-filter/filterSlice';\nimport { selectFilter } from '../../redux/contacts-filter/selectors';\nimport { Input } from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilterChange = ({ target }) => {\n    dispatch(setFilter(target.value.trim()));\n  };\n\n  return (\n    <Input\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleFilterChange}\n      placeholder=\"Search by name\"\n    />\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin: 0 auto;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  margin-right: 10px;\n`;\n\nexport const Button = styled.button`\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover {\n    background-color: #7396d8;\n  }\n`;\n\nexport const Error = styled.p`\n  text-align: center;\n  color: red;\n  font-size: 18px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts-filter/operations';\nimport { Item, Button, Text } from './ContactList.styled';\n\nconst ContactListItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Item>\n      <Text id={id}>\n        {name}: {number}\n      </Text>\n      <Button onClick={onDeleteContact}>Delete</Button>\n    </Item>\n  );\n};\n\nexport default ContactListItem;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactListItem from './ContactListItem';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from '../../redux/contacts-filter/selectors';\nimport { fetchContacts } from '../../redux/contacts-filter/operations';\nimport { Error, List } from './ContactList.styled';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <List>\n      {isLoading && <Loader />}\n      {error && <Error>{error}</Error>}\n      {visibleContacts.length > 0 &&\n        visibleContacts.map(contact => (\n          <ContactListItem key={contact.id} contact={contact} />\n        ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const AppWrap = styled.div`\n  padding-bottom: 20px;\n`;\n\n// export const Gradient = styled.div`\n//   position: fixed;\n//   top: 0;\n//   left: 0;\n//   width: 100%;\n//   height: 100%;\n//   background: linear-gradient(rgb(101, 101, 238), rgb(236, 206, 211));\n//   z-index: -1;\n// `;\n\nexport const Title = styled.h1`\n  text-align: center;\n  margin-bottom: 10px;\n`;\n\nexport const ContactsTitle = styled.h2`\n  text-align: center;\n  margin-bottom: 20px;\n`;\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { AppWrap, ContactsTitle, Title } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <>\n      <AppWrap>\n        <Title>Phonebook</Title>\n        <ContactForm />\n        <ContactsTitle>Contacts</ContactsTitle>\n        <Filter />\n        <ContactList />\n      </AppWrap>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","form","_templateObject","_taggedTemplateLiteral","Label","label","_templateObject2","Input","input","_templateObject3","Button","button","_templateObject4","ContactForm","name","setName","useState","number","setNumber","dispatch","useDispatch","handleChange","_ref","target","value","reset","_jsxs","onSubmit","evt","preventDefault","newContact","formatName","trim","formatNumber","addContact","children","_jsx","type","required","onChange","pattern","placeholder","selectIsLoading","state","contacts","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","items","contact","toLowerCase","includes","Filter","useSelector","setFilter","List","ul","Item","li","Text","p","Error","_templateObject5","id","onClick","onDeleteContact","deleteContact","ContactList","visibleContacts","useEffect","fetchContacts","Loader","length","map","ContactListItem","AppWrap","div","Title","h1","ContactsTitle","h2","Contacts","_Fragment"],"sourceRoot":""}